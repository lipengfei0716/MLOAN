<?xml version="1.0" encoding="UTF-8"?>
<web-app xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://java.sun.com/xml/ns/javaee" xsi:schemaLocation="http://java.sun.com/xml/ns/javaee http://java.sun.com/xml/ns/javaee/web-app_3_0.xsd" id="WebApp_ID" version="3.0">
  <display-name>MLOAN</display-name>
     <welcome-file-list>
<welcome-file>jsp/admin/login.jsp</welcome-file>
     	
     	
    </welcome-file-list>
   <!-- 加载spring容器 -->
  <context-param>
    <param-name>contextConfigLocation</param-name>
    <param-value>classpath:config/spring-controller.xml,classpath:config/spring-dao.xml,classpath:config/spring-transaction.xml</param-value>
  </context-param>
    <listener>
    <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
  </listener>
  <listener>
<listener-class>com.util.interceptor.UserListener</listener-class>
</listener>
  <!-- 配置springmvc的前端控制器DispatcherServlet（相当于一个servlet） -->
  <servlet>
		<servlet-name>springMVC</servlet-name>
		<servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
		<!-- contextConfigLocation是配置springmvc加载的配置文件（配置处理器映射器、适配器等） 
			  如果不配置contextConfigLocation，则默认加载的是/WEB-INF/springmvc-servlet.xml -->
		<init-param>
			<param-name>contextConfigLocation</param-name>
			<param-value>classpath:config/springMVC.xml</param-value>
		</init-param>
		<load-on-startup>1</load-on-startup>
  </servlet>
  <servlet-mapping>
	<servlet-name>springMVC</servlet-name>
	   <!-- 第一种：*.action，可以访问以.action结尾的地址，由DispatcherServlet进行解析 
		 第二种：/，所有访问的地址都由DispatcherServlet进行解析，对应静态文件的解析需要配置不让DispatcherServlet进行解析 
		 第三种：/*，这样配置是不对的，使用这种配置，最重要转发到一个jsp页面时，仍然会由DispatcherServlet解析jsp地址， 
		   		不能根据jsp页面找打Handler，会报错 -->
	  <url-pattern>/</url-pattern>
	</servlet-mapping>
	<listener>
	  <listener-class>org.springframework.web.util.IntrospectorCleanupListener</listener-class>
	</listener>
  <!-- 过滤器解决post乱码问题 -->  
  <filter>
    <filter-name>encodingFilter</filter-name>
    <filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    <init-param>
      <param-name>encoding</param-name>
      <param-value>UTF-8</param-value>
    </init-param>
    <init-param>
      <param-name>forceEncoding</param-name>
      <param-value>true</param-value>
    </init-param>
  </filter>
  <filter-mapping>
    <filter-name>encodingFilter</filter-name>
    <url-pattern>/*</url-pattern>
  </filter-mapping>
    <!--log4j的配置相关 -->  
   <context-param>  
       <param-name>log4jConfigLocation</param-name>  
       <param-value>classpath:log4j.properties</param-value>  
   </context-param>  
     
   <context-param>  
       <param-name>log4jRefreshInterval</param-name>  
       <param-value>60000</param-value>  
   </context-param>  
   <listener>  
       <listener-class>  
           org.springframework.web.util.Log4jConfigListener  
       </listener-class>  
   </listener>  
  <!-- end -->  
  <!-- 配置静态资源不经过spring mvc -->
  	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/fodder/*</url-pattern>
	</servlet-mapping>
  	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>/design/*</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.properties</url-pattern>
	</servlet-mapping>
		<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.xml</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jar</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.css</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.js</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.jpg</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.png</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.woff</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.ttf</url-pattern>
	</servlet-mapping>
	<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.html</url-pattern>
	</servlet-mapping>
		<servlet-mapping>
		<servlet-name>default</servlet-name>
		<url-pattern>*.eot</url-pattern>
	</servlet-mapping>
  <!-- tomcat接口 -->
	<resource-ref>
	    <description>DB Connection</description>
	    <res-ref-name>jndi-web</res-ref-name>
	    <res-type>javax.sql.DataSource</res-type>
	    <res-auth>Container</res-auth>
    </resource-ref>
    <!-- AuthFilter过滤器 -->
  	<filter>  
	    <filter-name>AuthFilter</filter-name>  
	    <filter-class>com.util.interceptor.AuthFilter</filter-class>  
	</filter>  
	<!-- 映射过滤器 -->
	<filter-mapping>  
	    <filter-name>AuthFilter</filter-name>  
	    <url-pattern>*.jsp</url-pattern>  
	</filter-mapping>  
	 <filter-mapping>
	     <filter-name>AuthFilter</filter-name>
	     <!-- “/*”表示拦截所有的请求 -->
	     <url-pattern>*.jsp</url-pattern>
	    <!--  REQUEST：当用户直接访问页面时，Web容器将会调用过滤器。如果目标资源是通过RequestDispatcher的include()或forward()方法访问时，那么该过滤器就不会被调用。
			  INCLUDE：如果目标资源是通过RequestDispatcher的include()方法访问时，那么该过滤器将被调用。除此之外，该过滤器不会被调用。
			  FORWARD：如果目标资源是通过RequestDispatcher的forward()方法访问时，那么该过滤器将被调用，除此之外，该过滤器不会被调用。
			  ERROR：如果目标资源是通过声明式异常处理机制调用时，那么该过滤器将被调用。除此之外，过滤器不会被调用。  -->
		 <dispatcher>REQUEST</dispatcher>
		 <dispatcher>FORWARD</dispatcher>
	 </filter-mapping>
	<!-- 定义过滤的URL -->
	<context-param>
		<param-name>uncheckdUrl</param-name>
		<param-value>/jsp/admin/login.jsp,/jsp/admin/register.jsp,/jsp/admin/success.jsp</param-value>
	</context-param>
		
		
</web-app>